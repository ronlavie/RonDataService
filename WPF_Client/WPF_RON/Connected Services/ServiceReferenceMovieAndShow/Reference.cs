//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WPF_RON.ServiceReferenceMovieAndShow {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="UserList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="User")]
    [System.SerializableAttribute()]
    public class UserList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.User> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool PermissionLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool PermissionLevel {
            get {
                return this.PermissionLevelField;
            }
            set {
                if ((this.PermissionLevelField.Equals(value) != true)) {
                    this.PermissionLevelField = value;
                    this.RaisePropertyChanged("PermissionLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseEntity", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.Movie))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.Category))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.RateMovie))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.Show))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.RateShow))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WPF_RON.ServiceReferenceMovieAndShow.User))]
    public partial class BaseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Movie", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Movie : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AboutField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImdbRatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImdbVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MetascoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.Category MovieCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MovieLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MovieNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PosterUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string About {
            get {
                return this.AboutField;
            }
            set {
                if ((object.ReferenceEquals(this.AboutField, value) != true)) {
                    this.AboutField = value;
                    this.RaisePropertyChanged("About");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ImdbRating {
            get {
                return this.ImdbRatingField;
            }
            set {
                if ((this.ImdbRatingField.Equals(value) != true)) {
                    this.ImdbRatingField = value;
                    this.RaisePropertyChanged("ImdbRating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImdbVotes {
            get {
                return this.ImdbVotesField;
            }
            set {
                if ((this.ImdbVotesField.Equals(value) != true)) {
                    this.ImdbVotesField = value;
                    this.RaisePropertyChanged("ImdbVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Metascore {
            get {
                return this.MetascoreField;
            }
            set {
                if ((this.MetascoreField.Equals(value) != true)) {
                    this.MetascoreField = value;
                    this.RaisePropertyChanged("Metascore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.Category MovieCategory {
            get {
                return this.MovieCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.MovieCategoryField, value) != true)) {
                    this.MovieCategoryField = value;
                    this.RaisePropertyChanged("MovieCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MovieLength {
            get {
                return this.MovieLengthField;
            }
            set {
                if ((this.MovieLengthField.Equals(value) != true)) {
                    this.MovieLengthField = value;
                    this.RaisePropertyChanged("MovieLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MovieName {
            get {
                return this.MovieNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MovieNameField, value) != true)) {
                    this.MovieNameField = value;
                    this.RaisePropertyChanged("MovieName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PosterUrl {
            get {
                return this.PosterUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PosterUrlField, value) != true)) {
                    this.PosterUrlField = value;
                    this.RaisePropertyChanged("PosterUrl");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Category : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RateMovie", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class RateMovie : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.Movie MovieField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StarsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.Movie Movie {
            get {
                return this.MovieField;
            }
            set {
                if ((object.ReferenceEquals(this.MovieField, value) != true)) {
                    this.MovieField = value;
                    this.RaisePropertyChanged("Movie");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stars {
            get {
                return this.StarsField;
            }
            set {
                if ((this.StarsField.Equals(value) != true)) {
                    this.StarsField = value;
                    this.RaisePropertyChanged("Stars");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Show", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Show : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ImdbRatingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImdbVotesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MetascoreField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PosterUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.Category ShowCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShowDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShowNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ImdbRating {
            get {
                return this.ImdbRatingField;
            }
            set {
                if ((this.ImdbRatingField.Equals(value) != true)) {
                    this.ImdbRatingField = value;
                    this.RaisePropertyChanged("ImdbRating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImdbVotes {
            get {
                return this.ImdbVotesField;
            }
            set {
                if ((this.ImdbVotesField.Equals(value) != true)) {
                    this.ImdbVotesField = value;
                    this.RaisePropertyChanged("ImdbVotes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Metascore {
            get {
                return this.MetascoreField;
            }
            set {
                if ((this.MetascoreField.Equals(value) != true)) {
                    this.MetascoreField = value;
                    this.RaisePropertyChanged("Metascore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PosterUrl {
            get {
                return this.PosterUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.PosterUrlField, value) != true)) {
                    this.PosterUrlField = value;
                    this.RaisePropertyChanged("PosterUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.Category ShowCategory {
            get {
                return this.ShowCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ShowCategoryField, value) != true)) {
                    this.ShowCategoryField = value;
                    this.RaisePropertyChanged("ShowCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShowDescription {
            get {
                return this.ShowDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ShowDescriptionField, value) != true)) {
                    this.ShowDescriptionField = value;
                    this.RaisePropertyChanged("ShowDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShowName {
            get {
                return this.ShowNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShowNameField, value) != true)) {
                    this.ShowNameField = value;
                    this.RaisePropertyChanged("ShowName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RateShow", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class RateShow : WPF_RON.ServiceReferenceMovieAndShow.BaseEntity {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.Show ShowField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StarsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WPF_RON.ServiceReferenceMovieAndShow.User UserField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.Show Show {
            get {
                return this.ShowField;
            }
            set {
                if ((object.ReferenceEquals(this.ShowField, value) != true)) {
                    this.ShowField = value;
                    this.RaisePropertyChanged("Show");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stars {
            get {
                return this.StarsField;
            }
            set {
                if ((this.StarsField.Equals(value) != true)) {
                    this.StarsField = value;
                    this.RaisePropertyChanged("Stars");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WPF_RON.ServiceReferenceMovieAndShow.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="MovieList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Movie")]
    [System.SerializableAttribute()]
    public class MovieList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.Movie> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RateMovieList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="RateMovie")]
    [System.SerializableAttribute()]
    public class RateMovieList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.RateMovie> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ShowList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Show")]
    [System.SerializableAttribute()]
    public class ShowList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.Show> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="RateShowList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="RateShow")]
    [System.SerializableAttribute()]
    public class RateShowList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.RateShow> {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="CategoryList", Namespace="http://schemas.datacontract.org/2004/07/Model", ItemName="Category")]
    [System.SerializableAttribute()]
    public class CategoryList : System.Collections.Generic.List<WPF_RON.ServiceReferenceMovieAndShow.Category> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReferenceMovieAndShow.IServiceMovieAndShow")]
    public interface IServiceMovieAndShow {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllUsers", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllUsersResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.UserList GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllUsers", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.UserList> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/Login", ReplyAction="http://tempuri.org/IServiceMovieAndShow/LoginResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.User Login(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/Login", ReplyAction="http://tempuri.org/IServiceMovieAndShow/LoginResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.User> LoginAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/CheckUserName", ReplyAction="http://tempuri.org/IServiceMovieAndShow/CheckUserNameResponse")]
        bool CheckUserName(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/CheckUserName", ReplyAction="http://tempuri.org/IServiceMovieAndShow/CheckUserNameResponse")]
        System.Threading.Tasks.Task<bool> CheckUserNameAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertUserResponse")]
        int InsertUser(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertUserResponse")]
        System.Threading.Tasks.Task<int> InsertUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateUserResponse")]
        int UpdateUser(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteUserResponse")]
        int DeleteUser(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.MovieList GetAllMovies();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.MovieList> GetAllMoviesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesFullData", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesFullDataResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.MovieList GetAllMoviesFullData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesFullData", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllMoviesFullDataResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.MovieList> GetAllMoviesFullDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertMoviesResponse")]
        int InsertMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertMoviesResponse")]
        System.Threading.Tasks.Task<int> InsertMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateMoviesResponse")]
        int UpdateMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateMoviesResponse")]
        System.Threading.Tasks.Task<int> UpdateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteMoviesResponse")]
        int DeleteMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteMoviesResponse")]
        System.Threading.Tasks.Task<int> DeleteMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByMovie", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByMovieResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.RateMovieList GetMovieRatingByMovie(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByMovie", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByMovieResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateMovieList> GetMovieRatingByMovieAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByUserResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.RateMovieList GetMovieRatingByUser(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieRatingByUserResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateMovieList> GetMovieRatingByUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/RateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/RateMoviesResponse")]
        int RateMovies(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/RateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/RateMoviesResponse")]
        System.Threading.Tasks.Task<int> RateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteRateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteRateMoviesResponse")]
        int DeleteRateMovies(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteRateMovies", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteRateMoviesResponse")]
        System.Threading.Tasks.Task<int> DeleteRateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieinfo", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieinfoResponse")]
        string GetMovieinfo(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetMovieinfo", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetMovieinfoResponse")]
        System.Threading.Tasks.Task<string> GetMovieinfoAsync(string movieName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllShowsResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.ShowList GetAllShows();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllShowsResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.ShowList> GetAllShowsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllShowsFullData", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllShowsFullDataResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.ShowList GetAllShowsFullData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllShowsFullData", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllShowsFullDataResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.ShowList> GetAllShowsFullDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByShow", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByShowResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.RateShowList GetShowRatingByShow(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByShow", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByShowResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateShowList> GetShowRatingByShowAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByUserResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.RateShowList GetShowRatingByUser(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByUser", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetShowRatingByUserResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateShowList> GetShowRatingByUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertShowsResponse")]
        int InsertShows(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertShowsResponse")]
        System.Threading.Tasks.Task<int> InsertShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateShowsResponse")]
        int UpdateShows(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateShowsResponse")]
        System.Threading.Tasks.Task<int> UpdateShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteShowsResponse")]
        int DeleteShows(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteShows", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteShowsResponse")]
        System.Threading.Tasks.Task<int> DeleteShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllCategories", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllCategoriesResponse")]
        WPF_RON.ServiceReferenceMovieAndShow.CategoryList GetAllCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/GetAllCategories", ReplyAction="http://tempuri.org/IServiceMovieAndShow/GetAllCategoriesResponse")]
        System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.CategoryList> GetAllCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertCategoryResponse")]
        int InsertCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/InsertCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/InsertCategoryResponse")]
        System.Threading.Tasks.Task<int> InsertCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateCategoryResponse")]
        int UpdateCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/UpdateCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/UpdateCategoryResponse")]
        System.Threading.Tasks.Task<int> UpdateCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteCategoryResponse")]
        int DeleteCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceMovieAndShow/DeleteCategory", ReplyAction="http://tempuri.org/IServiceMovieAndShow/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<int> DeleteCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceMovieAndShowChannel : WPF_RON.ServiceReferenceMovieAndShow.IServiceMovieAndShow, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceMovieAndShowClient : System.ServiceModel.ClientBase<WPF_RON.ServiceReferenceMovieAndShow.IServiceMovieAndShow>, WPF_RON.ServiceReferenceMovieAndShow.IServiceMovieAndShow {
        
        public ServiceMovieAndShowClient() {
        }
        
        public ServiceMovieAndShowClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceMovieAndShowClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMovieAndShowClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceMovieAndShowClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.UserList GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.UserList> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.User Login(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.Login(user);
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.User> LoginAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.LoginAsync(user);
        }
        
        public bool CheckUserName(string UserName) {
            return base.Channel.CheckUserName(UserName);
        }
        
        public System.Threading.Tasks.Task<bool> CheckUserNameAsync(string UserName) {
            return base.Channel.CheckUserNameAsync(UserName);
        }
        
        public int InsertUser(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.InsertUser(user);
        }
        
        public System.Threading.Tasks.Task<int> InsertUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.InsertUserAsync(user);
        }
        
        public int UpdateUser(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.DeleteUser(user);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.DeleteUserAsync(user);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.MovieList GetAllMovies() {
            return base.Channel.GetAllMovies();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.MovieList> GetAllMoviesAsync() {
            return base.Channel.GetAllMoviesAsync();
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.MovieList GetAllMoviesFullData() {
            return base.Channel.GetAllMoviesFullData();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.MovieList> GetAllMoviesFullDataAsync() {
            return base.Channel.GetAllMoviesFullDataAsync();
        }
        
        public int InsertMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.InsertMovies(movie);
        }
        
        public System.Threading.Tasks.Task<int> InsertMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.InsertMoviesAsync(movie);
        }
        
        public int UpdateMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.UpdateMovies(movie);
        }
        
        public System.Threading.Tasks.Task<int> UpdateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.UpdateMoviesAsync(movie);
        }
        
        public int DeleteMovies(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.DeleteMovies(movie);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.DeleteMoviesAsync(movie);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.RateMovieList GetMovieRatingByMovie(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.GetMovieRatingByMovie(movie);
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateMovieList> GetMovieRatingByMovieAsync(WPF_RON.ServiceReferenceMovieAndShow.Movie movie) {
            return base.Channel.GetMovieRatingByMovieAsync(movie);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.RateMovieList GetMovieRatingByUser(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.GetMovieRatingByUser(user);
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateMovieList> GetMovieRatingByUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.GetMovieRatingByUserAsync(user);
        }
        
        public int RateMovies(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie) {
            return base.Channel.RateMovies(rateMovie);
        }
        
        public System.Threading.Tasks.Task<int> RateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie) {
            return base.Channel.RateMoviesAsync(rateMovie);
        }
        
        public int DeleteRateMovies(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie) {
            return base.Channel.DeleteRateMovies(rateMovie);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRateMoviesAsync(WPF_RON.ServiceReferenceMovieAndShow.RateMovie rateMovie) {
            return base.Channel.DeleteRateMoviesAsync(rateMovie);
        }
        
        public string GetMovieinfo(string movieName) {
            return base.Channel.GetMovieinfo(movieName);
        }
        
        public System.Threading.Tasks.Task<string> GetMovieinfoAsync(string movieName) {
            return base.Channel.GetMovieinfoAsync(movieName);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.ShowList GetAllShows() {
            return base.Channel.GetAllShows();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.ShowList> GetAllShowsAsync() {
            return base.Channel.GetAllShowsAsync();
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.ShowList GetAllShowsFullData() {
            return base.Channel.GetAllShowsFullData();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.ShowList> GetAllShowsFullDataAsync() {
            return base.Channel.GetAllShowsFullDataAsync();
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.RateShowList GetShowRatingByShow(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.GetShowRatingByShow(show);
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateShowList> GetShowRatingByShowAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.GetShowRatingByShowAsync(show);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.RateShowList GetShowRatingByUser(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.GetShowRatingByUser(user);
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.RateShowList> GetShowRatingByUserAsync(WPF_RON.ServiceReferenceMovieAndShow.User user) {
            return base.Channel.GetShowRatingByUserAsync(user);
        }
        
        public int InsertShows(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.InsertShows(show);
        }
        
        public System.Threading.Tasks.Task<int> InsertShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.InsertShowsAsync(show);
        }
        
        public int UpdateShows(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.UpdateShows(show);
        }
        
        public System.Threading.Tasks.Task<int> UpdateShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.UpdateShowsAsync(show);
        }
        
        public int DeleteShows(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.DeleteShows(show);
        }
        
        public System.Threading.Tasks.Task<int> DeleteShowsAsync(WPF_RON.ServiceReferenceMovieAndShow.Show show) {
            return base.Channel.DeleteShowsAsync(show);
        }
        
        public WPF_RON.ServiceReferenceMovieAndShow.CategoryList GetAllCategories() {
            return base.Channel.GetAllCategories();
        }
        
        public System.Threading.Tasks.Task<WPF_RON.ServiceReferenceMovieAndShow.CategoryList> GetAllCategoriesAsync() {
            return base.Channel.GetAllCategoriesAsync();
        }
        
        public int InsertCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.InsertCategory(category);
        }
        
        public System.Threading.Tasks.Task<int> InsertCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.InsertCategoryAsync(category);
        }
        
        public int UpdateCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.UpdateCategory(category);
        }
        
        public System.Threading.Tasks.Task<int> UpdateCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.UpdateCategoryAsync(category);
        }
        
        public int DeleteCategory(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.DeleteCategory(category);
        }
        
        public System.Threading.Tasks.Task<int> DeleteCategoryAsync(WPF_RON.ServiceReferenceMovieAndShow.Category category) {
            return base.Channel.DeleteCategoryAsync(category);
        }
    }
}
